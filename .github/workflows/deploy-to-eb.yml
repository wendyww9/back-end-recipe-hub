name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven' # Simplifies Maven caching setup

    # The cache step is now integrated into setup-java@v4 with cache: 'maven'
    # - name: Cache Maven packages
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.m2
    #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Copy JAR to root directory
      run: cp target/back-end-recipe-hub-0.0.1-SNAPSHOT.jar ./

    - name: List files in root directory (for verification)
      run: ls -l ./
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install EB CLI and Deploy
      run: |
        pip install awsebcli

        echo "Deploying to Elastic Beanstalk environment..."
        # Deploy the specific JAR file, adding a label for tracking
        eb deploy ${{ secrets.EB_ENVIRONMENT_NAME }} \
          --timeout 300 \
          --label "gh-${{ github.sha }}" \
          --staged


    - name: Verify Deployment
      run: |
        echo "Waiting for application to start (initial check)..."
        # Give EB a moment to register the new version
        sleep 60

        # Poll EB status for environment health
        for i in {1..10}; do # Increased attempts for better reliability
          STATUS=$(eb status ${{ secrets.EB_ENVIRONMENT_NAME }} | grep 'Health:' | awk '{print $2}')
          if [ "$STATUS" == "Ok" ] || [ "$STATUS" == "Green" ]; then
            echo "✅ Elastic Beanstalk environment is healthy."
            break
          else
            echo "⏳ Environment health is '$STATUS', retrying in 30 seconds..."
            sleep 30
          fi
          if [ $i -eq 10 ]; then
            echo "❌ Elastic Beanstalk environment did not reach 'Ok' health within expected time."
            exit 1
          fi
        done

        # Get environment URL and perform application-level health check
        EB_URL=$(eb status ${{ secrets.EB_ENVIRONMENT_NAME }} | grep CNAME | awk '{print $2}')
        if [ -z "$EB_URL" ]; then
          echo "Error: Could not retrieve Elastic Beanstalk URL."
          exit 1
        fi
        echo "Environment URL: $EB_URL"

        echo "Performing application health check..."
        for i in {1..10}; do # Increased attempts
          if curl -f --max-time 10 http://$EB_URL/actuator/health; then
            echo "✅ Deployment successful! Application is healthy."
            exit 0
          else
            echo "⏳ Application health check attempt $i failed, retrying in 20 seconds..."
            sleep 20
          fi
        done

        echo "❌ Application health check failed after 10 attempts. Please check the application logs."
        exit 1